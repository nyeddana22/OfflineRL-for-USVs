// Generated by gencpp from file heron_msgs/Status.msg
// DO NOT EDIT!


#ifndef HERON_MSGS_MESSAGE_STATUS_H
#define HERON_MSGS_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace heron_msgs
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : header()
    , hardware_id()
    , mcu_uptime()
    , connection_uptime()
    , pcb_temperature(0.0)
    , user_current(0.0)
    , user_power_consumed(0.0)
    , motor_power_consumed(0.0)
    , total_power_consumed(0.0)  {
    }
  Status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , hardware_id(_alloc)
    , mcu_uptime()
    , connection_uptime()
    , pcb_temperature(0.0)
    , user_current(0.0)
    , user_power_consumed(0.0)
    , motor_power_consumed(0.0)
    , total_power_consumed(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _hardware_id_type;
  _hardware_id_type hardware_id;

   typedef ros::Duration _mcu_uptime_type;
  _mcu_uptime_type mcu_uptime;

   typedef ros::Duration _connection_uptime_type;
  _connection_uptime_type connection_uptime;

   typedef float _pcb_temperature_type;
  _pcb_temperature_type pcb_temperature;

   typedef float _user_current_type;
  _user_current_type user_current;

   typedef float _user_power_consumed_type;
  _user_power_consumed_type user_power_consumed;

   typedef float _motor_power_consumed_type;
  _motor_power_consumed_type motor_power_consumed;

   typedef float _total_power_consumed_type;
  _total_power_consumed_type total_power_consumed;





  typedef boost::shared_ptr< ::heron_msgs::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::heron_msgs::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::heron_msgs::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::heron_msgs::Status > StatusPtr;
typedef boost::shared_ptr< ::heron_msgs::Status const> StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::heron_msgs::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::heron_msgs::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::heron_msgs::Status_<ContainerAllocator1> & lhs, const ::heron_msgs::Status_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.hardware_id == rhs.hardware_id &&
    lhs.mcu_uptime == rhs.mcu_uptime &&
    lhs.connection_uptime == rhs.connection_uptime &&
    lhs.pcb_temperature == rhs.pcb_temperature &&
    lhs.user_current == rhs.user_current &&
    lhs.user_power_consumed == rhs.user_power_consumed &&
    lhs.motor_power_consumed == rhs.motor_power_consumed &&
    lhs.total_power_consumed == rhs.total_power_consumed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::heron_msgs::Status_<ContainerAllocator1> & lhs, const ::heron_msgs::Status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace heron_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::heron_msgs::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::heron_msgs::Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::heron_msgs::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::heron_msgs::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::heron_msgs::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::heron_msgs::Status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::heron_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "73638ba99aee6dc46e9610079bfb59d8";
  }

  static const char* value(const ::heron_msgs::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x73638ba99aee6dc4ULL;
  static const uint64_t static_value2 = 0x6e9610079bfb59d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::heron_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "heron_msgs/Status";
  }

  static const char* value(const ::heron_msgs::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::heron_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Specific system status data, transmitted by the MCU at 1Hz on status topic.\n"
"\n"
"Header header\n"
"\n"
"# Commit of firmware source.\n"
"string hardware_id\n"
"\n"
"# Times since MCU power-on and MCU rosserial connection, respectively.\n"
"duration mcu_uptime\n"
"duration connection_uptime\n"
"\n"
"# Temperature of PCB as measured by internal AVR thermometer,\n"
"# reported in degrees centigrade.\n"
"float32 pcb_temperature\n"
"\n"
"# Current sense available on platform, in amps.\n"
"# Averaged over the message period.\n"
"float32 user_current\n"
"\n"
"# Integration of power consumption since MCU power-on, in watt-hours.\n"
"float32 user_power_consumed\n"
"float32 motor_power_consumed\n"
"float32 total_power_consumed\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::heron_msgs::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::heron_msgs::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.hardware_id);
      stream.next(m.mcu_uptime);
      stream.next(m.connection_uptime);
      stream.next(m.pcb_temperature);
      stream.next(m.user_current);
      stream.next(m.user_power_consumed);
      stream.next(m.motor_power_consumed);
      stream.next(m.total_power_consumed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::heron_msgs::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::heron_msgs::Status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "hardware_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.hardware_id);
    s << indent << "mcu_uptime: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.mcu_uptime);
    s << indent << "connection_uptime: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.connection_uptime);
    s << indent << "pcb_temperature: ";
    Printer<float>::stream(s, indent + "  ", v.pcb_temperature);
    s << indent << "user_current: ";
    Printer<float>::stream(s, indent + "  ", v.user_current);
    s << indent << "user_power_consumed: ";
    Printer<float>::stream(s, indent + "  ", v.user_power_consumed);
    s << indent << "motor_power_consumed: ";
    Printer<float>::stream(s, indent + "  ", v.motor_power_consumed);
    s << indent << "total_power_consumed: ";
    Printer<float>::stream(s, indent + "  ", v.total_power_consumed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HERON_MSGS_MESSAGE_STATUS_H
